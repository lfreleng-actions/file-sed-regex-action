---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# Action test/validation workflow
name: 'Test GitHub Action üß™'

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

permissions: {}

jobs:
  ### Test the GitHub Action in this Repository ###
  tests:
    name: 'Action Testing'
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    timeout-minutes: 5
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # Perform setup prior to running test(s)
      - name: 'Checkout sample project repository'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: 'lfreleng-actions/test-python-project'
          path: 'test-python-project'

      # Substitution must succeed, sets exit status if it doesn't
      - name: "Run Action: ${{ github.repository }} [test-python-project]"
        uses: ./
        with:
          flags: "-i -E"
          regex: 's/^version =.*$/version = "1.0.0"/'
          path: 'test-python-project/pyproject.toml'


      - name: "Validate results of string substitution"
        shell: bash
        run: |
          # Validate results of string substitution
          string=$(grep version test-python-project/pyproject.toml || true)
          echo "$string"
          if [ "$string" != 'version = "1.0.0"' ]; then
            echo "Error: string substitution failed ‚ùå"
            exit 1
          else
            echo "Version string substitution successful ‚úÖ"
          fi

      # Test against a file that doesn't exist
      - name: "Run Action: ${{ github.repository }} [no-file]"
        uses: ./
        id: no-file
        continue-on-error: true
        with:
          flags: "-i -E"
          regex: 's:^version =.*$:version = 0.0.2:'
          path: 'no-file-here'

      - name: "Error if step above did NOT fail"
        if: steps.no-file.outcome == 'success'
        shell: bash
        run: |
          # Error if step above did NOT fail
          echo "Error: previous test step did NOT fail ‚ùå"; exit 1

      # Checkout lftools repository
      - name: "Checkout project repository with dynamic versioning"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: 'lfit/releng-lftools'
          path: 'releng-lftools'

      # lftools uses dynamic versioning, so this test fail
      - name: "Run Action: ${{ github.repository }} [exit 1]"
        id: no-substitution
        uses: ./
        continue-on-error: true
        with:
          flags: "-i -E"
          regex: 's/^version =.*$/version = "1.0.0"/;tx;q1;:x'
          path: 'releng-lftools/pyproject.toml'
          debug: true

      - name: "Error if step above did NOT fail"
        if: steps.no-substitution.outcome == 'success'
        shell: bash
        run: |
          # Error if step above did NOT fail
          echo "Error: previous test step did NOT fail ‚ùå"; exit 1

      # lftools uses dynamic versioning, so this test fail
      - name: "Run Action: ${{ github.repository }} [exit 5]"
        id: exit-five
        uses: ./
        continue-on-error: true
        with:
          flags: "-i -E"
          regex: 's/^version =.*$/version = "1.0.0"/;tx;q5;:x'
          path: 'releng-lftools/pyproject.toml'

      - name: "Error if step above did NOT fail"
        if: steps.exit-five.outcome == 'success'
        shell: bash
        run: |
          # Error if step above did NOT fail
          echo "Error: previous test step did NOT fail ‚ùå"
          if [ ${{ steps.exit-five.outputs.exit_status }} -ne 5 ]; then
            echo "Exit status output also invalid ‚ùå"
            echo "${{ steps.exit-five.outputs.exit_status }}"
          fi
